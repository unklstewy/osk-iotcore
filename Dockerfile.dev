# Development Dockerfile for osk-iotcore
# This provides a reproducible development environment with all necessary tools

FROM golang:1.22-alpine AS base

# Install system dependencies for development
RUN apk add --no-cache \
    git \
    make \
    curl \
    bash \
    build-base \
    linux-headers \
    pkgconfig \
    mesa-dev \
    wayland-dev \
    wayland-protocols \
    libxkbcommon-dev \
    xkeyboard-config \
    && rm -rf /var/cache/apk/*

# Set up Go environment
ENV GOPATH=/go
ENV PATH=$GOPATH/bin:$PATH
ENV GO111MODULE=on
ENV CGO_ENABLED=1

# Create app directory
WORKDIR /app

# Copy go mod files first for better caching
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Install development tools
RUN go install golang.org/x/tools/cmd/goimports@latest && \
    go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

# Install golangci-lint
RUN curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
    sh -s -- -b $(go env GOPATH)/bin latest

# Copy project files
COPY . .

# Create directories for build artifacts
RUN mkdir -p build coverage

# Set up git safe directory (for development containers)
RUN git config --global --add safe.directory /app

# Development stage
FROM base AS development

# Install additional development tools
RUN apk add --no-cache \
    vim \
    nano \
    htop \
    tree \
    jq \
    && rm -rf /var/cache/apk/*

# Install delve for debugging
RUN go install github.com/go-delve/delve/cmd/dlv@latest

# Install air for hot reloading (optional)
RUN go install github.com/cosmtrek/air@latest

# Create air config for hot reloading
RUN cat > .air.toml << 'EOF'
root = "."
testdata_dir = "testdata"
tmp_dir = "tmp"

[build]
  args_bin = []
  bin = "./tmp/main"
  cmd = "go build -o ./tmp/main ./cmd/oskway"
  delay = 1000
  exclude_dir = ["assets", "tmp", "vendor", "testdata", "build", "coverage"]
  exclude_file = []
  exclude_regex = ["_test.go"]
  exclude_unchanged = false
  follow_symlink = false
  full_bin = ""
  include_dir = []
  include_ext = ["go", "tpl", "tmpl", "html"]
  include_file = []
  kill_delay = "0s"
  log = "build-errors.log"
  poll = false
  poll_interval = 0
  rerun = false
  rerun_delay = 500
  send_interrupt = false
  stop_on_root = false

[color]
  app = ""
  build = "yellow"
  main = "magenta"
  runner = "green"
  watcher = "cyan"

[log]
  main_only = false
  time = false

[misc]
  clean_on_exit = false

[screen]
  clear_on_rebuild = false
  keep_scroll = true
EOF

# Set up useful aliases
RUN echo 'alias ll="ls -la"' >> ~/.bashrc && \
    echo 'alias la="ls -la"' >> ~/.bashrc && \
    echo 'alias ..="cd .."' >> ~/.bashrc && \
    echo 'alias ...="cd ../.."' >> ~/.bashrc && \
    echo 'alias build="make build"' >> ~/.bashrc && \
    echo 'alias test="make test"' >> ~/.bashrc && \
    echo 'alias lint="make lint"' >> ~/.bashrc && \
    echo 'alias fmt="make fmt"' >> ~/.bashrc

# Expose common ports for development
EXPOSE 8080 8443 9090 40000

# Default command for development
CMD ["bash"]

# Testing stage
FROM base AS testing

# Run tests and generate coverage
RUN make test

# Linting stage
FROM base AS linting

# Run linter
RUN make lint

# Build stage
FROM base AS builder

# Build the application
RUN make build

# Production stage (minimal)
FROM alpine:latest AS production

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    mesa-dri-gallium \
    wayland-libs-client \
    libxkbcommon \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Copy binary from builder
COPY --from=builder /app/build/oskway /usr/local/bin/oskway

# Set ownership
RUN chown appuser:appgroup /usr/local/bin/oskway

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD pgrep oskway || exit 1

# Default command
CMD ["oskway"]
